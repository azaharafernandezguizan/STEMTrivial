/* */ 
(function(Buffer) {
  'use strict';
  var inherits = require('inherits');
  var HashBase = require('hash-base');
  function RIPEMD160() {
    HashBase.call(this, 64);
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
  }
  inherits(RIPEMD160, HashBase);
  RIPEMD160.prototype._update = function() {
    var m = new Array(16);
    for (var i = 0; i < 16; ++i)
      m[i] = this._block.readInt32LE(i * 4);
    var al = this._a;
    var bl = this._b;
    var cl = this._c;
    var dl = this._d;
    var el = this._e;
    al = fn1(al, bl, cl, dl, el, m[0], 0x00000000, 11);
    cl = rotl(cl, 10);
    el = fn1(el, al, bl, cl, dl, m[1], 0x00000000, 14);
    bl = rotl(bl, 10);
    dl = fn1(dl, el, al, bl, cl, m[2], 0x00000000, 15);
    al = rotl(al, 10);
    cl = fn1(cl, dl, el, al, bl, m[3], 0x00000000, 12);
    el = rotl(el, 10);
    bl = fn1(bl, cl, dl, el, al, m[4], 0x00000000, 5);
    dl = rotl(dl, 10);
    al = fn1(al, bl, cl, dl, el, m[5], 0x00000000, 8);
    cl = rotl(cl, 10);
    el = fn1(el, al, bl, cl, dl, m[6], 0x00000000, 7);
    bl = rotl(bl, 10);
    dl = fn1(dl, el, al, bl, cl, m[7], 0x00000000, 9);
    al = rotl(al, 10);
    cl = fn1(cl, dl, el, al, bl, m[8], 0x00000000, 11);
    el = rotl(el, 10);
    bl = fn1(bl, cl, dl, el, al, m[9], 0x00000000, 13);
    dl = rotl(dl, 10);
    al = fn1(al, bl, cl, dl, el, m[10], 0x00000000, 14);
    cl = rotl(cl, 10);
    el = fn1(el, al, bl, cl, dl, m[11], 0x00000000, 15);
    bl = rotl(bl, 10);
    dl = fn1(dl, el, al, bl, cl, m[12], 0x00000000, 6);
    al = rotl(al, 10);
    cl = fn1(cl, dl, el, al, bl, m[13], 0x00000000, 7);
    el = rotl(el, 10);
    bl = fn1(bl, cl, dl, el, al, m[14], 0x00000000, 9);
    dl = rotl(dl, 10);
    al = fn1(al, bl, cl, dl, el, m[15], 0x00000000, 8);
    cl = rotl(cl, 10);
    el = fn2(el, al, bl, cl, dl, m[7], 0x5a827999, 7);
    bl = rotl(bl, 10);
    dl = fn2(dl, el, al, bl, cl, m[4], 0x5a827999, 6);
    al = rotl(al, 10);
    cl = fn2(cl, dl, el, al, bl, m[13], 0x5a827999, 8);
    el = rotl(el, 10);
    bl = fn2(bl, cl, dl, el, al, m[1], 0x5a827999, 13);
    dl = rotl(dl, 10);
    al = fn2(al, bl, cl, dl, el, m[10], 0x5a827999, 11);
    cl = rotl(cl, 10);
    el = fn2(el, al, bl, cl, dl, m[6], 0x5a827999, 9);
    bl = rotl(bl, 10);
    dl = fn2(dl, el, al, bl, cl, m[15], 0x5a827999, 7);
    al = rotl(al, 10);
    cl = fn2(cl, dl, el, al, bl, m[3], 0x5a827999, 15);
    el = rotl(el, 10);
    bl = fn2(bl, cl, dl, el, al, m[12], 0x5a827999, 7);
    dl = rotl(dl, 10);
    al = fn2(al, bl, cl, dl, el, m[0], 0x5a827999, 12);
    cl = rotl(cl, 10);
    el = fn2(el, al, bl, cl, dl, m[9], 0x5a827999, 15);
    bl = rotl(bl, 10);
    dl = fn2(dl, el, al, bl, cl, m[5], 0x5a827999, 9);
    al = rotl(al, 10);
    cl = fn2(cl, dl, el, al, bl, m[2], 0x5a827999, 11);
    el = rotl(el, 10);
    bl = fn2(bl, cl, dl, el, al, m[14], 0x5a827999, 7);
    dl = rotl(dl, 10);
    al = fn2(al, bl, cl, dl, el, m[11], 0x5a827999, 13);
    cl = rotl(cl, 10);
    el = fn2(el, al, bl, cl, dl, m[8], 0x5a827999, 12);
    bl = rotl(bl, 10);
    dl = fn3(dl, el, al, bl, cl, m[3], 0x6ed9eba1, 11);
    al = rotl(al, 10);
    cl = fn3(cl, dl, el, al, bl, m[10], 0x6ed9eba1, 13);
    el = rotl(el, 10);
    bl = fn3(bl, cl, dl, el, al, m[14], 0x6ed9eba1, 6);
    dl = rotl(dl, 10);
    al = fn3(al, bl, cl, dl, el, m[4], 0x6ed9eba1, 7);
    cl = rotl(cl, 10);
    el = fn3(el, al, bl, cl, dl, m[9], 0x6ed9eba1, 14);
    bl = rotl(bl, 10);
    dl = fn3(dl, el, al, bl, cl, m[15], 0x6ed9eba1, 9);
    al = rotl(al, 10);
    cl = fn3(cl, dl, el, al, bl, m[8], 0x6ed9eba1, 13);
    el = rotl(el, 10);
    bl = fn3(bl, cl, dl, el, al, m[1], 0x6ed9eba1, 15);
    dl = rotl(dl, 10);
    al = fn3(al, bl, cl, dl, el, m[2], 0x6ed9eba1, 14);
    cl = rotl(cl, 10);
    el = fn3(el, al, bl, cl, dl, m[7], 0x6ed9eba1, 8);
    bl = rotl(bl, 10);
    dl = fn3(dl, el, al, bl, cl, m[0], 0x6ed9eba1, 13);
    al = rotl(al, 10);
    cl = fn3(cl, dl, el, al, bl, m[6], 0x6ed9eba1, 6);
    el = rotl(el, 10);
    bl = fn3(bl, cl, dl, el, al, m[13], 0x6ed9eba1, 5);
    dl = rotl(dl, 10);
    al = fn3(al, bl, cl, dl, el, m[11], 0x6ed9eba1, 12);
    cl = rotl(cl, 10);
    el = fn3(el, al, bl, cl, dl, m[5], 0x6ed9eba1, 7);
    bl = rotl(bl, 10);
    dl = fn3(dl, el, al, bl, cl, m[12], 0x6ed9eba1, 5);
    al = rotl(al, 10);
    cl = fn4(cl, dl, el, al, bl, m[1], 0x8f1bbcdc, 11);
    el = rotl(el, 10);
    bl = fn4(bl, cl, dl, el, al, m[9], 0x8f1bbcdc, 12);
    dl = rotl(dl, 10);
    al = fn4(al, bl, cl, dl, el, m[11], 0x8f1bbcdc, 14);
    cl = rotl(cl, 10);
    el = fn4(el, al, bl, cl, dl, m[10], 0x8f1bbcdc, 15);
    bl = rotl(bl, 10);
    dl = fn4(dl, el, al, bl, cl, m[0], 0x8f1bbcdc, 14);
    al = rotl(al, 10);
    cl = fn4(cl, dl, el, al, bl, m[8], 0x8f1bbcdc, 15);
    el = rotl(el, 10);
    bl = fn4(bl, cl, dl, el, al, m[12], 0x8f1bbcdc, 9);
    dl = rotl(dl, 10);
    al = fn4(al, bl, cl, dl, el, m[4], 0x8f1bbcdc, 8);
    cl = rotl(cl, 10);
    el = fn4(el, al, bl, cl, dl, m[13], 0x8f1bbcdc, 9);
    bl = rotl(bl, 10);
    dl = fn4(dl, el, al, bl, cl, m[3], 0x8f1bbcdc, 14);
    al = rotl(al, 10);
    cl = fn4(cl, dl, el, al, bl, m[7], 0x8f1bbcdc, 5);
    el = rotl(el, 10);
    bl = fn4(bl, cl, dl, el, al, m[15], 0x8f1bbcdc, 6);
    dl = rotl(dl, 10);
    al = fn4(al, bl, cl, dl, el, m[14], 0x8f1bbcdc, 8);
    cl = rotl(cl, 10);
    el = fn4(el, al, bl, cl, dl, m[5], 0x8f1bbcdc, 6);
    bl = rotl(bl, 10);
    dl = fn4(dl, el, al, bl, cl, m[6], 0x8f1bbcdc, 5);
    al = rotl(al, 10);
    cl = fn4(cl, dl, el, al, bl, m[2], 0x8f1bbcdc, 12);
    el = rotl(el, 10);
    bl = fn5(bl, cl, dl, el, al, m[4], 0xa953fd4e, 9);
    dl = rotl(dl, 10);
    al = fn5(al, bl, cl, dl, el, m[0], 0xa953fd4e, 15);
    cl = rotl(cl, 10);
    el = fn5(el, al, bl, cl, dl, m[5], 0xa953fd4e, 5);
    bl = rotl(bl, 10);
    dl = fn5(dl, el, al, bl, cl, m[9], 0xa953fd4e, 11);
    al = rotl(al, 10);
    cl = fn5(cl, dl, el, al, bl, m[7], 0xa953fd4e, 6);
    el = rotl(el, 10);
    bl = fn5(bl, cl, dl, el, al, m[12], 0xa953fd4e, 8);
    dl = rotl(dl, 10);
    al = fn5(al, bl, cl, dl, el, m[2], 0xa953fd4e, 13);
    cl = rotl(cl, 10);
    el = fn5(el, al, bl, cl, dl, m[10], 0xa953fd4e, 12);
    bl = rotl(bl, 10);
    dl = fn5(dl, el, al, bl, cl, m[14], 0xa953fd4e, 5);
    al = rotl(al, 10);
    cl = fn5(cl, dl, el, al, bl, m[1], 0xa953fd4e, 12);
    el = rotl(el, 10);
    bl = fn5(bl, cl, dl, el, al, m[3], 0xa953fd4e, 13);
    dl = rotl(dl, 10);
    al = fn5(al, bl, cl, dl, el, m[8], 0xa953fd4e, 14);
    cl = rotl(cl, 10);
    el = fn5(el, al, bl, cl, dl, m[11], 0xa953fd4e, 11);
    bl = rotl(bl, 10);
    dl = fn5(dl, el, al, bl, cl, m[6], 0xa953fd4e, 8);
    al = rotl(al, 10);
    cl = fn5(cl, dl, el, al, bl, m[15], 0xa953fd4e, 5);
    el = rotl(el, 10);
    bl = fn5(bl, cl, dl, el, al, m[13], 0xa953fd4e, 6);
    dl = rotl(dl, 10);
    var ar = this._a;
    var br = this._b;
    var cr = this._c;
    var dr = this._d;
    var er = this._e;
    ar = fn5(ar, br, cr, dr, er, m[5], 0x50a28be6, 8);
    cr = rotl(cr, 10);
    er = fn5(er, ar, br, cr, dr, m[14], 0x50a28be6, 9);
    br = rotl(br, 10);
    dr = fn5(dr, er, ar, br, cr, m[7], 0x50a28be6, 9);
    ar = rotl(ar, 10);
    cr = fn5(cr, dr, er, ar, br, m[0], 0x50a28be6, 11);
    er = rotl(er, 10);
    br = fn5(br, cr, dr, er, ar, m[9], 0x50a28be6, 13);
    dr = rotl(dr, 10);
    ar = fn5(ar, br, cr, dr, er, m[2], 0x50a28be6, 15);
    cr = rotl(cr, 10);
    er = fn5(er, ar, br, cr, dr, m[11], 0x50a28be6, 15);
    br = rotl(br, 10);
    dr = fn5(dr, er, ar, br, cr, m[4], 0x50a28be6, 5);
    ar = rotl(ar, 10);
    cr = fn5(cr, dr, er, ar, br, m[13], 0x50a28be6, 7);
    er = rotl(er, 10);
    br = fn5(br, cr, dr, er, ar, m[6], 0x50a28be6, 7);
    dr = rotl(dr, 10);
    ar = fn5(ar, br, cr, dr, er, m[15], 0x50a28be6, 8);
    cr = rotl(cr, 10);
    er = fn5(er, ar, br, cr, dr, m[8], 0x50a28be6, 11);
    br = rotl(br, 10);
    dr = fn5(dr, er, ar, br, cr, m[1], 0x50a28be6, 14);
    ar = rotl(ar, 10);
    cr = fn5(cr, dr, er, ar, br, m[10], 0x50a28be6, 14);
    er = rotl(er, 10);
    br = fn5(br, cr, dr, er, ar, m[3], 0x50a28be6, 12);
    dr = rotl(dr, 10);
    ar = fn5(ar, br, cr, dr, er, m[12], 0x50a28be6, 6);
    cr = rotl(cr, 10);
    er = fn4(er, ar, br, cr, dr, m[6], 0x5c4dd124, 9);
    br = rotl(br, 10);
    dr = fn4(dr, er, ar, br, cr, m[11], 0x5c4dd124, 13);
    ar = rotl(ar, 10);
    cr = fn4(cr, dr, er, ar, br, m[3], 0x5c4dd124, 15);
    er = rotl(er, 10);
    br = fn4(br, cr, dr, er, ar, m[7], 0x5c4dd124, 7);
    dr = rotl(dr, 10);
    ar = fn4(ar, br, cr, dr, er, m[0], 0x5c4dd124, 12);
    cr = rotl(cr, 10);
    er = fn4(er, ar, br, cr, dr, m[13], 0x5c4dd124, 8);
    br = rotl(br, 10);
    dr = fn4(dr, er, ar, br, cr, m[5], 0x5c4dd124, 9);
    ar = rotl(ar, 10);
    cr = fn4(cr, dr, er, ar, br, m[10], 0x5c4dd124, 11);
    er = rotl(er, 10);
    br = fn4(br, cr, dr, er, ar, m[14], 0x5c4dd124, 7);
    dr = rotl(dr, 10);
    ar = fn4(ar, br, cr, dr, er, m[15], 0x5c4dd124, 7);
    cr = rotl(cr, 10);
    er = fn4(er, ar, br, cr, dr, m[8], 0x5c4dd124, 12);
    br = rotl(br, 10);
    dr = fn4(dr, er, ar, br, cr, m[12], 0x5c4dd124, 7);
    ar = rotl(ar, 10);
    cr = fn4(cr, dr, er, ar, br, m[4], 0x5c4dd124, 6);
    er = rotl(er, 10);
    br = fn4(br, cr, dr, er, ar, m[9], 0x5c4dd124, 15);
    dr = rotl(dr, 10);
    ar = fn4(ar, br, cr, dr, er, m[1], 0x5c4dd124, 13);
    cr = rotl(cr, 10);
    er = fn4(er, ar, br, cr, dr, m[2], 0x5c4dd124, 11);
    br = rotl(br, 10);
    dr = fn3(dr, er, ar, br, cr, m[15], 0x6d703ef3, 9);
    ar = rotl(ar, 10);
    cr = fn3(cr, dr, er, ar, br, m[5], 0x6d703ef3, 7);
    er = rotl(er, 10);
    br = fn3(br, cr, dr, er, ar, m[1], 0x6d703ef3, 15);
    dr = rotl(dr, 10);
    ar = fn3(ar, br, cr, dr, er, m[3], 0x6d703ef3, 11);
    cr = rotl(cr, 10);
    er = fn3(er, ar, br, cr, dr, m[7], 0x6d703ef3, 8);
    br = rotl(br, 10);
    dr = fn3(dr, er, ar, br, cr, m[14], 0x6d703ef3, 6);
    ar = rotl(ar, 10);
    cr = fn3(cr, dr, er, ar, br, m[6], 0x6d703ef3, 6);
    er = rotl(er, 10);
    br = fn3(br, cr, dr, er, ar, m[9], 0x6d703ef3, 14);
    dr = rotl(dr, 10);
    ar = fn3(ar, br, cr, dr, er, m[11], 0x6d703ef3, 12);
    cr = rotl(cr, 10);
    er = fn3(er, ar, br, cr, dr, m[8], 0x6d703ef3, 13);
    br = rotl(br, 10);
    dr = fn3(dr, er, ar, br, cr, m[12], 0x6d703ef3, 5);
    ar = rotl(ar, 10);
    cr = fn3(cr, dr, er, ar, br, m[2], 0x6d703ef3, 14);
    er = rotl(er, 10);
    br = fn3(br, cr, dr, er, ar, m[10], 0x6d703ef3, 13);
    dr = rotl(dr, 10);
    ar = fn3(ar, br, cr, dr, er, m[0], 0x6d703ef3, 13);
    cr = rotl(cr, 10);
    er = fn3(er, ar, br, cr, dr, m[4], 0x6d703ef3, 7);
    br = rotl(br, 10);
    dr = fn3(dr, er, ar, br, cr, m[13], 0x6d703ef3, 5);
    ar = rotl(ar, 10);
    cr = fn2(cr, dr, er, ar, br, m[8], 0x7a6d76e9, 15);
    er = rotl(er, 10);
    br = fn2(br, cr, dr, er, ar, m[6], 0x7a6d76e9, 5);
    dr = rotl(dr, 10);
    ar = fn2(ar, br, cr, dr, er, m[4], 0x7a6d76e9, 8);
    cr = rotl(cr, 10);
    er = fn2(er, ar, br, cr, dr, m[1], 0x7a6d76e9, 11);
    br = rotl(br, 10);
    dr = fn2(dr, er, ar, br, cr, m[3], 0x7a6d76e9, 14);
    ar = rotl(ar, 10);
    cr = fn2(cr, dr, er, ar, br, m[11], 0x7a6d76e9, 14);
    er = rotl(er, 10);
    br = fn2(br, cr, dr, er, ar, m[15], 0x7a6d76e9, 6);
    dr = rotl(dr, 10);
    ar = fn2(ar, br, cr, dr, er, m[0], 0x7a6d76e9, 14);
    cr = rotl(cr, 10);
    er = fn2(er, ar, br, cr, dr, m[5], 0x7a6d76e9, 6);
    br = rotl(br, 10);
    dr = fn2(dr, er, ar, br, cr, m[12], 0x7a6d76e9, 9);
    ar = rotl(ar, 10);
    cr = fn2(cr, dr, er, ar, br, m[2], 0x7a6d76e9, 12);
    er = rotl(er, 10);
    br = fn2(br, cr, dr, er, ar, m[13], 0x7a6d76e9, 9);
    dr = rotl(dr, 10);
    ar = fn2(ar, br, cr, dr, er, m[9], 0x7a6d76e9, 12);
    cr = rotl(cr, 10);
    er = fn2(er, ar, br, cr, dr, m[7], 0x7a6d76e9, 5);
    br = rotl(br, 10);
    dr = fn2(dr, er, ar, br, cr, m[10], 0x7a6d76e9, 15);
    ar = rotl(ar, 10);
    cr = fn2(cr, dr, er, ar, br, m[14], 0x7a6d76e9, 8);
    er = rotl(er, 10);
    br = fn1(br, cr, dr, er, ar, m[12], 0x00000000, 8);
    dr = rotl(dr, 10);
    ar = fn1(ar, br, cr, dr, er, m[15], 0x00000000, 5);
    cr = rotl(cr, 10);
    er = fn1(er, ar, br, cr, dr, m[10], 0x00000000, 12);
    br = rotl(br, 10);
    dr = fn1(dr, er, ar, br, cr, m[4], 0x00000000, 9);
    ar = rotl(ar, 10);
    cr = fn1(cr, dr, er, ar, br, m[1], 0x00000000, 12);
    er = rotl(er, 10);
    br = fn1(br, cr, dr, er, ar, m[5], 0x00000000, 5);
    dr = rotl(dr, 10);
    ar = fn1(ar, br, cr, dr, er, m[8], 0x00000000, 14);
    cr = rotl(cr, 10);
    er = fn1(er, ar, br, cr, dr, m[7], 0x00000000, 6);
    br = rotl(br, 10);
    dr = fn1(dr, er, ar, br, cr, m[6], 0x00000000, 8);
    ar = rotl(ar, 10);
    cr = fn1(cr, dr, er, ar, br, m[2], 0x00000000, 13);
    er = rotl(er, 10);
    br = fn1(br, cr, dr, er, ar, m[13], 0x00000000, 6);
    dr = rotl(dr, 10);
    ar = fn1(ar, br, cr, dr, er, m[14], 0x00000000, 5);
    cr = rotl(cr, 10);
    er = fn1(er, ar, br, cr, dr, m[0], 0x00000000, 15);
    br = rotl(br, 10);
    dr = fn1(dr, er, ar, br, cr, m[3], 0x00000000, 13);
    ar = rotl(ar, 10);
    cr = fn1(cr, dr, er, ar, br, m[9], 0x00000000, 11);
    er = rotl(er, 10);
    br = fn1(br, cr, dr, er, ar, m[11], 0x00000000, 11);
    dr = rotl(dr, 10);
    var t = (this._b + cl + dr) | 0;
    this._b = (this._c + dl + er) | 0;
    this._c = (this._d + el + ar) | 0;
    this._d = (this._e + al + br) | 0;
    this._e = (this._a + bl + cr) | 0;
    this._a = t;
  };
  RIPEMD160.prototype._digest = function() {
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
      this._block.fill(0, this._blockOffset, 64);
      this._update();
      this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    var buffer = new Buffer(20);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    buffer.writeInt32LE(this._e, 16);
    return buffer;
  };
  function rotl(x, n) {
    return (x << n) | (x >>> (32 - n));
  }
  function fn1(a, b, c, d, e, m, k, s) {
    return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0;
  }
  function fn2(a, b, c, d, e, m, k, s) {
    return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0;
  }
  function fn3(a, b, c, d, e, m, k, s) {
    return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0;
  }
  function fn4(a, b, c, d, e, m, k, s) {
    return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0;
  }
  function fn5(a, b, c, d, e, m, k, s) {
    return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0;
  }
  module.exports = RIPEMD160;
})(require('buffer').Buffer);
